<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.sound.min.js"></script>
</head>
<body>
  <div id="p5-wrapper"></div>
  <script>
    class Lsystem {
      constructor(axiom = "F", rules = []) {
    
        this.rules = rules;
        if (this.rules.length <= 0) {
          this.rules[0] = {
            a: "F",
            b: "FF+[+F-F-F]-[-F+F+F]"
          };
        }
    
        this.axiom = axiom;
        this.sentence = this.axiom;
        this.lenMaster = 100;
        this.len = this.lenMaster;
        this.angle = radians(25);
    
        this.tree = [];
      }
    
      setAxiom(axiom) {
        this.axiom = axiom;
      }
      setLen(len) {
        this.lenMaster = len;
      }
      setAngle(angle) {
        this.angle = angle;
      }
      setRules(rules) {
        this.rules[0] = {
          a: "F",
          b: rules
        };
      }
    
      generate() {
        if (this.sentence.length > 2048) {
          this.sentence = this.axiom;
          this.len = this.lenMaster;
        }
    
        this.len *= 0.5;
        this.nextSentence = "";
    
        for (let i = 0; i < this.sentence.length; i++) {
          this.found = false;
          this.current = this.sentence.charAt(i);
    
          for (let j = 0; j < this.rules.length; j++) {
            if (this.current == this.rules[j].a) {
              this.found = true;
              this.nextSentence += this.rules[j].b;
              break;
            }
    
    
          }
          if (!this.found) {
            this.nextSentence += this.current;
    
          }
        }
    
        this.sentence = this.nextSentence;
    
    
      }
    
      turtle() {
        resetMatrix();
        translate(width / 2, height);
    
        for (let i = 0; i < this.sentence.length; i++) {
          this.current = this.sentence.charAt(i);
          if (this.current == "F") {
            line(0, 0, 0, -this.len);
    
            translate(0, -this.len);
    
          } else if (this.current == "+") {
            rotate(this.angle);
          } else if (this.current == "-") {
            rotate(-this.angle);
          }
          else if (this.current == "[") {
            push();
          }
          else if (this.current == "]") {
            pop();
          }
        }
    
        stroke(51, 100);
        //resetMatrix();
    
        for (let i of this.tree) {
    
          let [beginX, endX, beginY, endY] = i;
          line(beginX, endX, beginY, endY);
          translate(endX, endY);
          this.len *= 0.67;
        }
      }
    }
    const RULES = [['F', 'F', '-', '[', '-', 'F', '+', 'F', '+', 'F', ']', '+', '[', '+', 'F', '-', 'F', '-', 'F', ']'], ['F', '[', '+', 'F', ']', 'F', '[', '-', 'F', ']', '[', 'F', ']'], ['F', '[', '+', 'F', ']', 'F', '[', '-', 'F', ']', 'F'], ['F', '[', 'F', '+', 'F', '+', 'F', ']', 'F', '[', 'F', '-', 'F', '-', 'F', ']'], ['F', 'F', '[', '+', 'F', ']', '[', '-', 'F', ']', 'F', 'F', '[', '-', 'F', '+', 'F', '+', 'F', ']']];
    function setup(){
        var canvas = createCanvas(400, 400);
        canvas.parent('p5-wrapper');
        
        canvas = canvas.canvas;
        tree = new Lsystem();
        rule = RULES[Math.floor ( Math.random() * RULES.length )]
        tree.setRules(rule);
    }

    function draw(){
        background(127);

        frameCount++;
        if (frameCount % 7 === 0) {
          tree.generate();
        }


        tree.turtle();
    }
  </script>
</body>
</html>